http {

  upstream auth_service {
    server localhost:8080;
  }

  upstream app_backend {
    server localhost:5000;
  }

  upstream socket_service {
    server localhost:8081;
  }

  server {
    listen 80;
    server_name localhost;

    # Route for authentication service (no change)
    location /auth/ {
      proxy_pass http://auth_service;
    }


    location /socket.io/ {
      # First, validate the user just like a normal API call
      auth_request /validate_internal;

      # Forward the user ID from the auth response to your socket service
      proxy_set_header X-User-Id $upstream_http_x_user_id;

      # These headers are required to upgrade the connection to a WebSocket
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_http_version 1.1;

      # Forward the request to your Go socket microservice
      proxy_pass http://socket_service;
    }

    # Route for your main backend API 
    location /api/ {
      auth_request /validate_internal;
      proxy_set_header X-User-Id $upstream_http_x_user_id;
      proxy_pass http://app_backend;
    }

    # Internal validation endpoint 
    location = /validate_internal {
      internal;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_set_header Cookie $http_cookie;
      proxy_pass http://auth_service/auth/validate;
    }
  }
}